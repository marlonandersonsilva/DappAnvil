import { ethers } from 'ethers';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function main() {
  try {
    // Connect to the local Anvil node
    const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');
    
    // Get the first account from Anvil (which has test ETH)
    const wallet = new ethers.Wallet('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', provider);
    
    console.log('Deploying contracts with the account:', wallet.address);
    
    // Read the compiled contract artifact
    const tokenAbi = JSON.parse(fs.readFileSync(path.join(__dirname, '../src/abis/Token.json'), 'utf8'));
    const tokenBytecode = '0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556040805180820190915260098152680416e76696c546f6b656e60b81b60208201908152906100539160019161010a565b5060408051808201909152600381526241564c60e81b602082015260029061007c9082610196565b506003805460ff1916600117905568056bc75e2d6310000060045560045460005460405160009261ffff19909216916001600160a01b0316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a36101a9565b82805461011690610169565b90600052602060002090601f016020900481019282610138576000855561017e565b82601f1061015157805160ff191683800117855561017e565b8280016001018555821561017e579182015b8281111561017e578251825591602001919060010190610163565b5061018a92915061018e565b5090565b5b8082111561018a5760008155600101610190565b600181811c908216806101a357607f821691505b60208210810361019657634e487b7160e01b600052602260045260246000fd5b610619806101b86000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146101055780635c658165146101145780636f9fb98a1461012757806370a082311461012f57806395d89b411461014257600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100e1575b600080fd5b6100a061014a565b6040516100ad9190610508565b60405180910390f35b6100c96100c4366004610579565b6101d8565b60405190151581526020016100ad565b6004546100a0565b6100c96100ef3660046105a3565b610244565b60035460ff166040519081526020016100ad565b6100a06101223660046105df565b610370565b6004546100a0565b6100a061013d366004610609565b610391565b6100a06103ac565b60018054610157906104d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610183906104d7565b80156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6001600160a01b03831660009081526006602052604081205482111561026a57600080fd5b6001600160a01b03841660009081526005602090815260408083203384529091529020548211156102995760009150506103a5565b6001600160a01b038416600090815260066020526040812080548492906102c19084906104a0565b90915550506001600160a01b038316600090815260066020526040812080548492906102ee90849061048a565b90915550506001600160a01b0384166000908152600560209081526040808320338452909152812080548492906103269084906104a0565b909155505060408051848152602081018490526001600160a01b0380861692908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600191505b9392505050565b600560209081526000928352604080842090915290825290205481565b60066020526000908152604090205481565b60028054610157906104d7565b80356001600160a01b03811681146103d457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261040057600080fd5b813567ffffffffffffffff8082111561041b5761041b6103d9565b604051601f8301601f19908116603f01168101908282118183101715610443576104436103d9565b8160405283815286602085880101111561045c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000821982111561049d5761049d610474565b500190565b6000828210156104b2576104b2610474565b500390565b600181811c908216806104cb57607f821691505b602082108103610474577f4e487b7160e01b600052602260045260246000fd5b600181811c908216806104eb57607f821691505b602082108103610474577f4e487b7160e01b600052602260045260246000fd5b600060208083528351808285015260005b8181101561053557858101830151858201604001528201610519565b81811115610547576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146103d457600080fd5b6000806040838503121561058c57600080fd5b61059583610562565b946020939093013593505050565b6000806000606084860312156105b857600080fd5b6105c184610562565b92506105cf60208501610562565b9150604084013590509250925092565b600080604083850312156105f257600080fd5b6105fb83610562565b946020939093013593505050565b60006020828403121561061b57600080fd5b61062482610562565b939250505056fea2646970667358221220e4e4e7a9a5c0c7a7e2c8e0d1c8e9c0c7a7e2c8e0d1c8e9c0c7a7e2c8e0d1c8e90064';
    
    // Deploy the contract
    const factory = new ethers.ContractFactory(tokenAbi, tokenBytecode, wallet);
    const token = await factory.deploy();
    
    console.log('Token deployed to:', token.target);
    
    // Update the token address in the App.tsx file
    const appFilePath = path.join(__dirname, '../src/App.tsx');
    let appContent = fs.readFileSync(appFilePath, 'utf8');
    
    // Replace the example token address with the actual deployed address
    appContent = appContent.replace(
      /const tokenAddress = '0x[a-fA-F0-9]{40}';/,
      `const tokenAddress = '${token.target}';`
    );
    
    fs.writeFileSync(appFilePath, appContent);
    console.log('Updated token address in App.tsx');
    
    console.log('Deployment completed successfully!');
  } catch (error) {
    console.error('Error during deployment:', error);
    process.exit(1);
  }
}

main();